이제 객체가 살아갈 세상 속에서 객체가 맡게 될 임무에 대해 이야기를 해보자.
객체는 살아있는 유기체이고, 다른 객체들과 서로 상호작용을 하며 도움을 주기도, 받기도 한다.
객체가 사는 세계는 매우 사회적이며, 유대감이 높은 환경이다.

여기서 중요한 것은 객체들은 서로를 필요로 하고, 결합된다는 것이다.

결합이 된다는 것은 아까 말한 것처럼 서로를 필요로 하는 것이기 때문에 자연스러운 것이다.
허나 문제가 한 가지 있다. 결합은 유지보수성에 영향을 미친다.

설계를 시작하는 단계에서는 어떤 객체가 다른 객체를 필요로 하는 직접적인(강한) 결합들을 보는 것이 직관적이고 시스템을 이해하는데 편리하다.
문제는 어플리케이션이 점점 성장하면서 발생한다. 강한 결합이라면, 유지보수성에 안 좋은 영향을 미치게 된다.

어디선가 사용되고 있는 객체를 수정하게 되면, 사용하는 쪽의 코드도 수정하게 된다. 이건 당연하다 볼 수 있다.
하지만 사용량이 많아진다면?
전체적으로 수정되어야 하는 코드의 수도 증가하게 되고, 복잡해지다보면, 버그가 발생할 가능성이 높아진다.
이렇게 되면, 아무래도 수정이나, 어플리케이션을 확장하는데 소극적이게 될 수 밖에 없어진다.

그럼 어떻게 해야할까? 이 강한 결합을 느슨한 결합으로 바꿀 수 있다.
방법은 바로 인터페이스를 사용하는 것이다.
인터페이스를 사용하면, 객체를 사용하는 쪽에서는 구현체와는 직접적인 결합이 없기 때문에, 구현체를 수정하더라도 사용하는 쪽의 코드를 바꿀 필요가 없어진다.
그러면서 자연스레 유지보수성이 높아진다.

결합은 필연적인 것이지만, 유지보수성을 위해 느슨한 결합으로 바꾸자.

참고)
올바른 설계라면 클래스 안의 모든 퍼블릭 메서드는 인터페이스를 구현한 것이어야 한다.
아니라면 구현체를 직접 사용하게 되어, 대체할 수 없게 된다.

핵심)
객체 세상에서 결합은 당연하다.
하지만 유지보수성을 위해 느슨한 결합으로 바꿀 수 있다.
그 방법이 인터페이스다.
인터페이스를 항상 사용하고, 모든 퍼블릭 메서드가 인터페이스를 구현한 것이도록 만들자.
