인터페이스를 작게 유지하자.
클래스를 작게 만드는 것이 중요하다면, 인터페이스는 더 작게 만들어야 한다.
인터페이스는 여러 개를 구현할 수 있기 때문.

인터페이스를 작게 유지하는데 도움이 될 만한 Smart한 방법을 하나 소개한다.
interface Exchange {
  float rate(String target);
  float rate(String source, String target);
}

1. 위의 인터페이스는 어떠한가?
좋지 않다.
인터페이스는 구현자에게 너무 많은 것을 요구하면 안된다.
오버로딩이 많아지면, SRP를 위반하는 클래스를 만들 가능성이 높아진다.(응집도가 낮아진다.)
이에 대한 해결책으로 Smart클래스를 소개한다.

2. Smart클래스
interface Exchange {
  float rate(String source, String target);
  
  final class Smart {
    private final Exchange origin;
    public float toUsd(String source) {
      return this.origin.rate(source, "USD");
    }
  }
}

float rate = new Exchange.Smart(new NYSE()).toUsd("EUR");

Smart클래스는 위와 같이 공통적인 작업을 수행하는 오버로딩 관련된 문제를 깔끔하게 해결할 수 있다.
(물론, 공통적이지 않다면 불가능하다.)
좀 더 나아가, .toUsd("EUR");도 Smart에 넣을 수 있다.

interface Exchange {
  float rate(String source, String target);
  
  final class Smart {
    private final Exchange origin;
    public float toUsd(String source) {
      return this.origin.rate(source, "USD");
    }
    public float eurToUsd() {
      return this.toUsd("EUR");
    }
  }
}
float rate = new Exchange.Smart(new NYSE()).eurToUsd();

이렇게 Smart클래스를 이용하여, 공유하는 기능들은 Smart에 묶어 놓아서 인터페이스의 크기를 작게 유지하고,
구현체들 또한 크기를 작게 유지할 수 있다.


핵심)
인터페이스를 작게 유지하자.
오버로딩을 사용 안하기 위해서 Smart클래스를 이용해보자.
Smart클래스는 공통적인 작업을 할 때 사용할 수 있다.
Smart는 커지겠지만, 인터페이스가 작게 유지되므로, 구현체도 작게 유지된다.

생각)
클래스를 작게 유지해야한다는 생각에 동의를 하고 있었지만,
인터페이스는 더 작아야한다는 말에 다중구현을 생각해보니 바로 수긍할 수 있었다.
또 공통적인 작업을 위해 추상클래스가 아닌 Smart클래스를 놓을 수 있다는 사실도 신기했다.
