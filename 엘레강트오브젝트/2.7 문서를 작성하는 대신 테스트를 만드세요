문서화는 유지보수에 있어서 중요한 구성요소이다.
문서화 자체에 의미가 있는 것이 아니라, 클래스나 메서드에 관한 추가 정보에 얼마나 쉽게 다가갈 수 있는지가 의미가 있다.

본론은 아래 쪽에 있다.

문서를 작성하는데 있어 기준은, 문서를 읽는 대상이 거의 아무 지식이 없는 주니어 프로그래머라고 가정하는 것이다.
이렇게 하는 편이, 상대방을 존중하는 일이다.
나쁜 프로그래머는 복잡한 코드를, 좋은 프로그래머는 단순한 코드를 짠다.

좋은 예시와 나쁜 예시를 한 번 보자
class Helper {
    int saveAndCheck(float x) { .. }
    float extract(String text) { .. }
    boolean convert(int value, boolean extra) { .. }
}

좋은 코드인가, 나쁜 코드인가?
나쁜코드다.
이름부터 무엇을 도와주는 클래스인지,
메서드는 저장하고 체크하는데 무엇을 반환하는 것인지 등등, 메서드의 목적이 무엇인지, 메서드를 어떻게 사용해야 하는지 알 수가 없다.

class WebPage {
    String content() { .. }
    void update(String content) { .. }
}
이와 같이 목적이 명확하고 작게 만들어야 한다.


본론이다.
이렇게 코드를 짜면 끝일까? 아니다.
단위 테스트를 만들면, 더 이해하기 쉬운 코드가 된다.

테스트를 작성할 때는, 클래스의 사용 방법을 보여주는 느낌으로 작성하면 된다.
백문불여일견. 아무리 글로 설명하는 것 보다, 한 번 코드로 동작을 보여주는 것이 낫다. 이게 문서 작성 대신, 테스트를 만들라는 이유다.

그리고 잊지 말아야 한다. 메인 코드만큼 깔끔한 단위 테스트를 만들기 위해 관심을 기울여야 한다.


핵심)
좋은 코드는 목적이 명확하고 읽기 쉬운 작은 코드이다.
문서를 작성하는 이유는 코드를 이해하기 위해서인데,
결론적으로 단위 테스트를 작성하는 것이 문서 보다 이해하기 더 쉽다.
단위 테스트도 잘 만들어야 한다.

생각)
단위 테스트 작성은 여태까지 검증의 의미로만 생각을 해왔었다.
여기서 말한, '클래스의 사용방법을 보여준다'라는 관점은 처음이었다.
이 둘을 적절하게 섞는다면, 단위 테스트를 작성할 때 부담감을 덜 수 있지 않을까?
