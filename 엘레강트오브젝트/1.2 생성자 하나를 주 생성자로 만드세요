생성자의 주된 작업은 제공된 인자를 사용해서 캡슐화하고 있는 프로퍼티를 초기화하는 일이다.
주 생성자를 하나 두고, 부 생성자들이 주 생성자를 호출하도록 만들어라.


그렇게 해야하는 이유는 유지보수성 때문이다.
나중에 몇 개월 뒤 다시 클래스를 본다고 했을 때, 어떤 생성자가 주 생성자인지 찾는데 시간을 보내는 것보다, 마지막 생성자 하나를 주 생성자로 놓는다면 시간을 훨씬 줄일 수 있다.

그리고 프로그래밍에 유연성을 줄 수 있다. (사용자가 클래스를 편하게 사용할 수 있다)
new Cash(30);
new Cash("29.95");
new Cash(29.95l);
위와 같이 여러 생성자를 오버로딩해놓는다면, 사용자는 별도의 변환작업없이 Cash클래스를 사용할 수 있다. 그런 작업들은 Cash클래스가 해준다.
만약 각각이 주 생성자였다면, 유효성검사로직이 추가된다면 주 생성자 모두에 로직을 추가해주어야 한다.


참고)
저자가 생각하기엔 2~3개의 메서드와 5~10개의 생성자를 포함하는 것이 적당하고 한다.
메서드는 많아질 수록 클래스의 초점이 흐려지고 단일책임원칙을 위반하게 된다.
생성자는 많아질 수록 유연성이 향상된다.


핵심)
생성자의 주된 작업은 제공된 인자를 사용해서 캡슐화하고 있는 프로퍼티를 초기화하는 일이다.
주 생성자를 하나 두고, 부 생성자들이 주 생성자를 호출하도록 만들어라. - 코드중복이 없어지고, 이해하기 쉬워진다.
생성자는 많이 두고, 메서드는 적게 둬라 - 클래스 사용에 유연성이 생기고, 단일책임원칙을 지키게 된다.

번외)
부 생성자에서 주 생성자를 호출하기 전에 몇 가지 변환 등의 작업을 해주어야 한다면, private static 메서드를 호출할 수 밖에 없다.