저자가 말하는 나쁜 프랙티스의 모킹을 사용하는 예는 다음과 같다.

class Cash {
  private final Exchange exchange;
  private final int cents;
  
  public Cash(Exchange exchange) {
    this.exchange = exchange;
  }
  
  public Cash in(String currency) {
    return new Cash(
      this.exchange,
      this.cents * this.exchange.rate(
        "USD", currency
      )
  }
}

위와 같은 클래스가 있고, 이를 사용할 때는
Cash dollar = new Cash(new NYSE("secret"), 100);
Cash euro = dollar.in("EUR");
와 같이 사용된다.

여기서 new NYSE("secret")은 외부 API를 호출하여 정보를 가져온다고 가정하자.
우리는 외부 API통신 없이도 Cash클래스를 테스트할 수 있는 방법이 필요하다.
그리고 모킹을 사용할 수 있다.

Exchange exchange = Mockito.mock(Exchange.class);
Mockito.doReturn(1.15)
  .when(exchange)
  .rate("USD", "EUR");
Cash dollar = new Cash(Exchange, 500);
Cash euro = dollar.in("EUR");
assert "5.75".equals(euro.toString());

이 부부에서 저자는 mock이 나쁜 프랙티스라고 말한다. 그 이유는 Cash에 대한 단위 테스트인데,
Cash를 테스트하는데 Exchange의 동작 방식을 설정하고 있기 때문이다.
Cash의 동작방식을 'Exchange.rate()가 사용될거야' 라고 말해주고 있다.

Cash의 동작방식이 어떻게 될지는 전적으로 Cash에게 달린 일이지 어떤 방식으로 사용될지는 우리는 몰라야 한다.
그래야만 Exchange가 수정되더라도 테스트 코드를 변경할 일이 없어진다.

그러면 어떤 방법이 있을까? 페이크 객체를 사용하라고 말한다.
페이크 객체는 중첩된 클래스로 인터페이스의 일부이며, 인터페이스와 함께 제공된다.

interface Exchange {
  float rate(String origin, String target);
  
  final class Fake implements Exchange {
    @Override
    float rate(String origin, String target) {
      return 1.2345;
    }
  }
}

Exchange exchange = new Exchange.Fake();
Cash dollar = new Cash(exchange, 500);
Cash euro = dollar.in("EUR");
assert "6.17".equals(euro.toString());

이렇게 되면 테스트 코드는 더 간결해지고, Cash는 Exchange를 어떻게 사용하는지 모르게 되어, 유지보수가 더 좋아진다.

모킹은 클래스 구현과 관련된 내부의 세부사항을 테스트와 결합시킨다.
이는 좋지 않습니다. 반면 페이크 클래스는 결합을 없애주며, 테스트를 용이하게 할 수 있다.
또 페이크 클래스를 쓰면, 인터페이스의 설계에 관해 더 깊이 고민하도록 해준다.

핵심)
Mock을 사용하게 되면 테스트 하려는 클래스의 세부사항까지 설정하게 된다.
이는 테스트 목적에 어긋나게 된다.(세부사항의 내용을 해당 클래스 테스트에서 알 필요가 없는 것임)
방법으로는 인터페이스의 일부인 Fake객체를 제공하는 것이며,
이를 통해 클래스와, 클래스 내부의 세부사항 결합도를 줄일 수 있게 된다.
또 페이크 객체를 사용하면, 인터페이스 설계에 깊이 고민하게 되어 더 좋은 설계가 나온다.

생각)
페이크 객체를 사용하게 되면 인터페이스가 더 커지게 된다.
목 객체를 사용하게 되면 테스트 코드의 복잡성이 증가된다.
어떤 것이 좋을지는 팀원과 상의해보면 어떨까?
